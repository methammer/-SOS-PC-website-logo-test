---
// src/components/LottieAnimation.astro
export interface Props {
  path: string; // Path to the Lottie JSON file (e.g., in /public or an external URL)
  width?: string;
  height?: string;
  loop?: boolean;
  autoplay?: boolean;
}

const {
  path,
  width = '300px',
  height = '300px',
  loop = true,
  autoplay = true
} = Astro.props;

// Generate a unique ID for each instance to avoid conflicts if multiple animations are on the page
const animationId = `lottie-container-${Math.random().toString(36).substring(2, 9)}`;
---

<div id={animationId} style={`width: ${width}; height: ${height}; margin: 0 auto;`}></div>

<script define:vars={{ animationPath: path, containerId: animationId, loopOpt: loop, autoplayOpt: autoplay }}>
  import lottie from 'lottie-web/build/player/lottie_light.js';

  const initLottieAnimation = () => {
    const container = document.getElementById(containerId);

    if (!container) {
      console.error(`[Lottie] Container with ID "${containerId}" not found for path "${animationPath}".`);
      return;
    }

    if (container.dataset.lottieInitialized === 'true') {
      // console.log(`[Lottie] Animation for "${containerId}" already initialized.`);
      return;
    }
    container.dataset.lottieInitialized = 'true';
    // console.log(`[Lottie] Initializing for ${containerId} with path: ${animationPath}`);

    try {
      const anim = lottie.loadAnimation({
        container: container,
        renderer: 'svg',
        loop: loopOpt,
        autoplay: autoplayOpt,
        path: animationPath
      });

      anim.addEventListener('DOMLoaded', () => {
        // console.log(`[Lottie] Animation DOM loaded for ${containerId} (${animationPath})`);
      });

      anim.addEventListener('data_failed', () => {
        console.error(`[Lottie] Data_failed for ${containerId} (path: ${animationPath}). Check if JSON is valid and accessible. The browser might show a 404 error in the Network tab if the file path is incorrect.`);
        container.innerHTML = `<p style="color: red; text-align: center; font-size: 0.8em; padding: 10px;">Error: Failed to load Lottie animation data from ${animationPath}.</p>`;
      });

      anim.addEventListener('error', (errorEvent) => {
        console.error(`[Lottie] Generic error for ${containerId} (path: ${animationPath}):`, errorEvent);
        container.innerHTML = `<p style="color: red; text-align: center; font-size: 0.8em; padding: 10px;">Error: Lottie animation error for ${animationPath}.</p>`;
      });

    } catch (error) {
      console.error(`[Lottie] General error during loadAnimation for ${containerId} (path: ${animationPath}):`, error);
      if (container) {
        container.innerHTML = `<p style="color: red; text-align: center; font-size: 0.8em; padding: 10px;">Error initializing Lottie for ${animationPath}.</p>`;
      }
    }
  };

  // Astro executes component scripts after their HTML is rendered.
  // Using DOMContentLoaded as an additional safeguard or for non-Astro contexts.
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLottieAnimation);
  } else {
    // DOMContentLoaded has already fired
    initLottieAnimation();
  }

  // If using Astro View Transitions or complex client-side routing,
  // you might need these event listeners to re-initialize animations.
  // document.addEventListener('astro:page-load', initLottieAnimation);
  // document.addEventListener('astro:after-swap', initLottieAnimation);
</script>
