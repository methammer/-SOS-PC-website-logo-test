---
import ThemeSwitcher from './ThemeSwitcher.astro';

// Define navigation links - adjust hrefs and text as needed
const navLinks = [
  { href: "/", text: "Accueil", id: "home" },
  { href: "/#services", text: "Services", id: "services" },
  { href: "/#portfolio", text: "Portfolio", id: "portfolio" },
  { href: "/#contact", text: "Contact", id: "contact" },
];

// You can retrieve this from a global config or define it here
const siteTitle = "SOS-PC"; 
---
<nav id="main-navbar" aria-label="Navigation principale">
  <div class="nav-container">
    <a href="/" class="logo-container" aria-label={`Retour Ã  la page d'accueil de ${siteTitle}`}>
      <img src="/logo.png" alt={`${siteTitle} Logo`} id="navbar-logo" />
      <span class="logo-text">{siteTitle}</span>
    </a>
    
    <ul class="nav-links">
      {navLinks.map(link => (
        <li><a href={link.href} data-navid={link.id}>{link.text}</a></li>
      ))}
    </ul>

    <div class="theme-switcher-container">
      <ThemeSwitcher />
    </div>
  </div>
</nav>

<style define:vars={{ siteTitle }}>
  /* Using --maxNavbarHeight from Layout.astro for consistency */
  /* Default fallback if --maxNavbarHeight is not available for some reason */
  :root {
    --navbar-internal-height: var(--maxNavbarHeight, 80px); 
  }

  nav#main-navbar {
    background-color: var(--navbar-bg-color);
    border-bottom: 1px solid var(--navbar-border-color);
    position: fixed; /* Fixed position at the top */
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000; /* Ensure navbar is above other content */
    box-sizing: border-box;
    height: var(--navbar-internal-height);
    padding: 0 1.5rem; /* Horizontal padding */
    display: flex; /* For vertical alignment of .nav-container */
    align-items: center; /* Vertically center .nav-container */
    transition: background-color 0.3s ease, border-color 0.3s ease;
  }

  .nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: var(--max-content-width, 1200px); /* Max width for navbar content itself */
    margin: 0 auto; /* Center the container */
  }

  .logo-container {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: var(--text-color); /* Inherit text color */
  }

  #navbar-logo {
    /* Dynamically size logo based on navbar height, with a max */
    height: calc(var(--navbar-internal-height) - 30px); /* e.g., 80px - 30px = 50px */
    max-height: 50px; /* Absolute maximum height for the logo */
    width: auto; /* Maintain aspect ratio */
    cursor: pointer;
    margin-right: 10px; /* Space between logo and text */
    transition: transform 0.3s ease; /* For subtle hover effects if any */
  }
  
  .logo-text {
    font-size: clamp(1.2rem, 3vw, 1.5rem); /* Responsive font size */
    font-weight: bold;
    color: var(--heading-color); /* Use heading color for logo text */
    transition: color 0.3s ease;
  }

  /* Logo bounce animation */
  #navbar-logo.bounce {
    animation: logoBounce 0.7s cubic-bezier(0.68, -0.55, 0.27, 1.55);
  }

  @keyframes logoBounce {
    0%, 100% { transform: scale(1) translateY(0); }
    10% { transform: scale(1.1, 0.9) translateY(0); }
    30% { transform: scale(0.9, 1.1) translateY(-10px); } /* Bounce up */
    50% { transform: scale(1.05, 0.95) translateY(0); }
    70% { transform: scale(1) translateY(-5px); } /* Smaller bounce */
    90% { transform: scale(1) translateY(0); }
  }

  .nav-links {
    list-style: none;
    display: flex;
    gap: clamp(1rem, 2.5vw, 1.75rem); /* Responsive gap */
    margin: 0;
    padding: 0;
  }

  .nav-links a {
    text-decoration: none;
    color: var(--navbar-link-color);
    font-weight: 500;
    font-size: clamp(0.9rem, 2vw, 1rem); /* Responsive font size */
    padding: 0.5rem 0.25rem; /* Padding for touch targets and underline space */
    position: relative;
    transition: color 0.3s ease;
  }

  .nav-links a::after { /* Underline effect */
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    background-color: var(--accent);
    transition: width 0.3s ease-in-out;
  }

  .nav-links a:hover,
  .nav-links a.active { /* Style for hover and active links */
    color: var(--accent); /* Use accent color from global styles */
  }
  html.dark .nav-links a:hover,
  html.dark .nav-links a.active {
    color: rgb(var(--accent-light)); /* Lighter accent for dark mode */
  }


  .nav-links a:hover::after,
  .nav-links a.active::after {
    width: 100%;
  }
  
  .theme-switcher-container {
    /* Minimal styling, relies on ThemeSwitcher's own styles */
    display: flex;
    align-items: center;
  }

  /* Responsive adjustments for navbar */
  @media (max-width: 768px) {
    nav#main-navbar {
      padding: 0 1rem; /* Reduce padding on smaller screens */
    }
    .nav-links {
      /* Example: Hide links and show a burger menu icon instead */
      /* For now, just reduce gap or let them wrap if too many */
      gap: clamp(0.5rem, 2vw, 1rem);
    }
    .logo-text {
      display: none; /* Hide logo text on very small screens to save space */
    }
    #navbar-logo {
       height: calc(var(--navbar-internal-height) - 36px); /* e.g. 80px - 36px = 44px */
       max-height: 40px; /* Max logo height on small screens */
    }
  }
  @media (max-width: 480px) {
    .nav-links {
        gap: 0.5rem; /* Further reduce gap */
    }
    .nav-links a {
        font-size: 0.85rem;
        padding: 0.5rem 0.1rem;
    }
  }
</style>

<script>
  // astro:page-load ensures this runs on initial load and subsequent page navigations
  document.addEventListener('astro:page-load', () => {
    const logoElement = document.getElementById('navbar-logo');
    
    if (logoElement) {
      logoElement.addEventListener('click', (event) => {
        // The logo is inside an <a> tag, so clicking it will navigate.
        // If you want to prevent navigation and only animate, use event.preventDefault().
        // For now, let's assume navigation is desired.

        // Avoid re-triggering if already bouncing, or remove and re-add for restart
        if (logoElement.classList.contains('bounce')) {
          // Option 1: Prevent re-triggering during animation
          return; 
          // Option 2: Restart animation (can be janky if clicked too fast)
          // logoElement.classList.remove('bounce');
          // void logoElement.offsetWidth; // Force reflow to restart animation
        }

        logoElement.classList.add('bounce');
        
        // Remove the class after animation completes to allow re-triggering
        logoElement.addEventListener('animationend', () => {
          logoElement.classList.remove('bounce');
        }, { once: true }); // Listener removed after first trigger
      });
    }

    // Active navigation link highlighting
    function updateActiveNavLink() {
      const currentPath = window.location.pathname + window.location.hash;
      const navLinkElements = document.querySelectorAll('.nav-links a');
      
      navLinkElements.forEach(link => {
        const linkHref = link.getAttribute('href');
        // Check for exact match or root path match for home
        if (linkHref === currentPath || (linkHref === "/" && (currentPath === "/index.html" || currentPath === "/"))) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    }
    
    updateActiveNavLink(); // Call on page load

    // Optional: Listen for hash changes if you have same-page anchor links
    window.addEventListener('hashchange', updateActiveNavLink);
  });
</script>
